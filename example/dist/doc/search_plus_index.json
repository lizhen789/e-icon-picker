{"./":{"url":"./","title":"项目介绍","keywords":"","body":"e-icon-picker 图标选择组件 简洁大方，专为element-ui（已经脱离element-ui独立可用）和font-awesome（可选）图标库开发的图标选择组件，希望大家喜欢！ 喜欢的欢迎star 项目地址 Demo 在线测试 在线API 安装 因为项目使用了element-ui的组件进行二次开发，所以在使用此组件前请安装element-ui组件库。 安装方式请参考element-ui官网的相关文档。element-ui官网。 已经脱离element-ui，不需要再安装element-ui了。 npm 安装 推荐使用 npm 的方式安装，它能更好地和 webpack 打包工具配合使用。 npm install e-icon-picker 快速使用 import iconPicker from 'e-icon-picker'; import \"e-icon-picker/dist/symbol.js\"; //基本彩色图标库 import 'e-icon-picker/dist/index.css'; // 基本样式，包含基本图标 import 'font-awesome/css/font-awesome.min.css'; //font-awesome 图标库 import 'element-ui/lib/theme-chalk/icon.css'; //element-ui 图标库 Vue.use(iconPicker, {FontAwesome: true, ElementUI: true, eIcon: true, eIconSymbol: true}); 详细文档 使用文档 使用 捐赠支持 开源项目不易，若此项目能得到你的青睐，可以捐赠支持作者持续开发与维护。喜欢的欢迎star 项目地址。 另： 本人还有一个开源项目，在项目中的菜单管理使用了该图标组件，喜欢的可以去看看，帮忙点个star,非常感谢！ 项目地址： novel 演示图 Copyright © cnovel.club 2020 all right reserved，powered by Gitbook本书发布时间： 2021-02-20 17:51:58 "},"doc/update/":{"url":"doc/update/","title":"更新日志","keywords":"","body":"更新日志 v1.0.17 感谢元谷 PR 可自定义的icon。 修改为国内cdn地址 更新文档 v1.0.16 感谢gyy PR icon增加title，提高辨识度。 更新文档 v1.0.15 细节优化。 v1.0.11 新增针对svg图标的支持。 升级支持cdn引入。 更新依赖。 其他优化。 v1.0.8 将所需的 Element UI 组件全部打入到项目中，不在需要安装 Element UI 组件。 将 Element UI 和 font-awesome 图标库分离，可按需引用，减少组件库大小。 将iconfont彩色图标分离，减少组件库的基本大小，可按需引用。 v1.0.5 更新 Element UI 版本以及 VUE 等版本。 添加iconfont彩色图标的支持。 添加三组iconfont彩色图标。 v1.0.4 修复代码库存在es6浏览器不兼容的语法。 添加iconfont图标库支持。 v1.0.3 修复 I1CSU0 问题。 更新项目依赖项。 v1.0.2 修复ie浏览器下无法正常关闭问题。 删除项目无用依赖。 对项目webpack配置进行优化。 v1.0.0 加入使用文档。 添加控件内动态添加或者删除图标。 添加对图标进行去重。 添加图标选择器示例。 修复添加或者删除图标时类型判断问题。 修复每次打开图标选择器时滚动条和位置不统一问题。 其他优化 v0.0.5 添加全局初始化参数。 添加组件使用时局部参数。 对fontAwesome和elementUI图标分开加载。 加入自定义图标列表参数。 修改控件图标可搜索功能。 添加控件选择后可清空。 其他优化。 v0.0.1 初始化项目 Copyright © cnovel.club 2020 all right reserved，powered by Gitbook本书发布时间： 2021-02-20 17:51:58 "},"doc/use/":{"url":"doc/use/","title":"安装","keywords":"","body":"安装 因为项目使用了element-ui的组件进行二次开发，所以在使用此组件前请安装element-ui组件库。 安装方式请参考element-ui官网的相关文档。element-ui官网。 已经脱离element-ui，不需要再安装element-ui了。 npm安装 推荐使用 npm 的方式安装，它能更好地和 webpack 打包工具配合使用。 npm install e-icon-picker -S cdn 引入 https://unpkg.zhimg.com/e-icon-picker/dist/index.js https://unpkg.zhimg.com/e-icon-picker/dist/index.css https://unpkg.zhimg.com/font-awesome/css/font-awesome.min.css https://unpkg.com/element-ui/lib/theme-chalk/icon.css https://unpkg.zhimg.com/e-icon-picker/dist/symbol.js Copyright © cnovel.club 2020 all right reserved，powered by Gitbook本书发布时间： 2021-02-20 17:51:58 "},"doc/use/quickstart.html":{"url":"doc/use/quickstart.html","title":"快速上手","keywords":"","body":"快速上手 全局注册 在引入组件时，可以传入一个全局配置对象，该配置对象目前支持FontAwesome、ElementUI、eIcon、eIconSymbol、addIconList和removeIconList，FontAwesome、ElementUI和eIcon可选值有true和false，表示是否使用该组件图标。 eIconSymbol可选值有true和false，表示eIcon图标是否为彩色图标。 addIconList是自定义新增图标名称的数组，removeIconList则是自定义删除图标名称的数组。 在main.js中加入： import iconPicker from 'e-icon-picker'; import \"e-icon-picker/dist/symbol.js\"; //基本彩色图标库 import 'e-icon-picker/dist/index.css'; // 基本样式，包含基本图标 import 'font-awesome/css/font-awesome.min.css'; //font-awesome 图标库 import 'element-ui/lib/theme-chalk/icon.css'; //element-ui 图标库 Vue.use(iconPicker, {FontAwesome: true, ElementUI: true, eIcon: true, eIconSymbol: true});//使用e-icon-picker 局部注册 引入e-icon-picker组件 import {EIconPicker} from 'e-icon-picker'; 在组件components中声明 export default { name: 'app', components: { EIconPicker}, data() { return { icon: '', options: { FontAwesome: false, ElementUI: false, eIcon: true,//自带的图标，来自阿里妈妈 eIconSymbol: true,//是否开启彩色图标 addIconList: [], removeIconList: [] } } } } 在全局样式中引入css @import 'e-icon-picker/dist/index.css'; //基础样式 @import 'font-awesome/css/font-awesome.min.css'; //font-awesome 图标库 @import 'element-ui/lib/theme-chalk/icon.css'; //element-ui 图标库 使用 显示图标 完整示例请参考 example 项目 简单使用请参考 example1.vue 文件 高级 全局设置 在main.js中全局注册是可以加入以下参数： Vue.use(eIconPicker, {FontAwesome: true, ElementUI: true, eIcon: true, eIconSymbol: true}); 具体参数信息，请参考 参数配置 全局添加图标或者删除图标 通过全局配置添加或者删除 Vue.use(eIconPicker, {FontAwesome: true, ElementUI: true, eIcon: true, eIconSymbol: true, addIconList: [], removeIconList: []}); 通过提供的函数进行配置 import eIconPicker, {iconList} from 'e-icon-picker'; Vue.use(eIconPicker); iconList.addIcon([\"el-icon-s-ticket\", \"el-icon-s-help\", \"el-icon-s-help\"]);//添加图标 iconList.removeIcon([\"el-icon-s-ticket\"]);//删除图标 使用示例请参考main.js文件 局部添加图标或者删除图标 使用时添加一个ref属性： 通过ref获取e-icon-picker组件，再调用组件方法： mounted() { this.$refs['iconPicker'].addIcon(\"fa fa-slack\");//组件内动态添加图标 this.$refs['iconPicker'].removeIcon(\"fa fa-slack\");//组件内动态删除图标 setTimeout(() => {//通过修改参数进行重新设置组件 this.options.addIconList.push('el-icon-message-solid'); this.options.removeIconList.push('removeIconList'); console.log(\"定时任务触发\") }, 5000); } 使用示例请参考example3.vue文件 使用iconfont图标 将图标导入到项目中（iconfont.json文件也要导入） 删除iconfont.css中多余的css样式 .iconfont { font-family: \"iconfont\" !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } 获取css的名称 import {analyzingIconForIconfont} from 'e-icon-picker';//引入解析json的函数 import iconfont from \"./css/iconfont.json\";//引入json文件 import \"./css/iconfont.css\";//引入css let forIconfont = analyzingIconForIconfont(iconfont);//解析class //let forIconfont = eIconSymbol(iconfont);//解析彩色图标 //全局删除增加图标 Vue.use(eIconPicker, {FontAwesome: true, ElementUI: true, addIconList: forIconfont.list, removeIconList: []});//全局注册图标 属性配置 具体配置项请参考 参数配置，对应的示例请参考example2.vue文件 使用svg图标 创建图标文件夹src/icons/svg/。 在vue.config.js配置中加入以下代码。 const path = require('path'); function resolve(dir) { return path.join(__dirname, dir) } module.exports = { productionSourceMap: true, configureWebpack: { resolve: { alias: { '@': resolve('src') } } }, chainWebpack(config) { // set svg-sprite-loader config.module .rule('svg') .exclude.add(resolve('src/icons')) //对应刚刚创建文件夹的位置，排除默认的svg图片处理规则 .end(); config.module .rule('icons') .test(/\\.svg$/) .include.add(resolve('src/icons')) //对应刚刚创建文件夹的位置 .end() .use('svg-sprite-loader') //处理svg使用的loader，默认自带，如果提示出错，请手动安装 .loader('svg-sprite-loader') .options({ symbolId: '[name]' }) .end() } }; 在项目的环境配置文件中加入以下配置 系统会自动加载该目录下的所有svg文件，不支持扫描子文件夹，@对应src文件夹 .env.development 文件 VUE_APP_SVG = '@/icons/svg' .env.production 文件 VUE_APP_SVG = '@/icons/svg' 使用svg图标 在main.js中引入 import eIconPicker from 'e-icon-picker'; //svgIcons 对应的就是图标列表，将图标列表添加到选择器就可以了 import svgIcons from 'e-icon-picker/dist/getSvg'; //全局删除增加图标 Vue.use(eIconPicker, { addIconList: svgIcons, }); 如有疑问请参考：example 使用其他icon组件替换eIcon 使用方法（svg-icon为admin-element-vue的icon组件） 感谢元谷 PR 可自定义的icon Copyright © cnovel.club 2020 all right reserved，powered by Gitbook本书发布时间： 2021-02-20 17:51:58 "},"doc/use/configuration.html":{"url":"doc/use/configuration.html","title":"参数配置","keywords":"","body":"参数配置 名称 功能 默认值 可选值 disabled 是否禁用 false true/false readonly 原生属性，是否只读 false true/false clearable 是否可清空 true true/false placement 弹窗位置 bottom top/bottom styles 组件自定义样式 空 无 options 图标参数 {FontAwesome: true, ElementUI: true, addIconList: [], removeIconList: []} 无 options.FontAwesome 是否使用FontAwesome图标 true true/false options.ElementUI 是否使用ElementUI图标 true true/false options.eIcon 自带彩色图标 true true/false options.eIconSymbol 是否使用彩色图标（false：则eIcon图标为单色） true true/false options.addIconList 自定义新增图标列表 [] 无 options.removeIconList 自定义删除图标列表 [] 无 Copyright © cnovel.club 2020 all right reserved，powered by Gitbook本书发布时间： 2021-02-20 17:51:58 "},"doc/dev/":{"url":"doc/dev/","title":"二次开发","keywords":"","body":"二次开发 下载 git clone git@gitee.com:cnovel/e-icon-picker.git 执行 npm install 安装依赖 编辑 src 目录的源码 执行 npm run build && npm link 编译并链接（npm link不懂的可以自行百度） 执行 cd example && npm install 切换到example项目下，并安装依赖 执行 npm link e-icon-picker 链接e-icon-picker编译好的代码 执行 npm run serve 启动示例 Copyright © cnovel.club 2020 all right reserved，powered by Gitbook本书发布时间： 2021-02-20 17:51:58 "}}